{
  "feature": {
    "name": "Git Internal Operations",
    "description": "Understanding Git's core operations and data structures",
    "source": "git/git source code learning",
    "categories": {
      "Basics": {
        "scenarios": ["Object Storage", "Simple Commits"],
        "complexity": "Beginner"
      },
      "Advanced": {
        "scenarios": ["Merging", "Rebasing", "Cherry-picking"],
        "complexity": "Advanced"
      },
      "Internals": {
        "scenarios": ["Hash Objects", "Pack Files", "Refs"],
        "complexity": "Expert"
      }
    },
    "flows": [
      {
        "name": "Object Storage",
        "complexity": "Basic",
        "time": "5 mins",
        "prerequisites": "None"
      },
      {
        "name": "Commit Creation",
        "complexity": "Basic",
        "time": "8 mins",
        "prerequisites": "Object Storage"
      },
      {
        "name": "Merge Process",
        "complexity": "Advanced",
        "time": "10 mins",
        "prerequisites": "Commit Creation"
      },
      {
        "name": "Rebase Operation",
        "complexity": "Advanced",
        "time": "15 mins",
        "prerequisites": "Merge Process"
      }
    ],
    "scenarios": [
      {
        "name": "Git Object Storage Internals",
        "description": "How Git stores content in its object database",
        "tag": "BasicScenario",
        "steps": [
          {
            "name": "Initialize Repository Structure",
            "entryPoint": "Initialize empty repository",
            "sections": [
              {
                "name": "Repository Setup",
                "codeBlocks": [
                  {
                    "name": "Initial Structure",
                    "code": [
                      "repo = {",
                      "  'latest_commit': None,",
                      "  'refs': {'HEAD': None, 'main': None},",
                      "  'objects': {}",
                      "}"
                    ],
                    "variables": [
                      {
                        "name": "repo",
                        "previous": null,
                        "current": {
                          "latest_commit": null,
                          "refs": { "HEAD": null, "main": null },
                          "objects": {}
                        },
                        "type": "dictionary",
                        "important": true
                      }
                    ],
                    "conceptDetails": {
                      "title": "Git Repository Structure",
                      "points": [
                        "Stores the latest commit reference.",
                        "Manages object storage."
                      ],
                      "focus": "Understanding Git's internal data structure."
                    }
                  },
                  {
                    "name": "Collections Init",
                    "code": [
                      "commits = []",
                      "blobs = []",
                      "trees = []"
                    ],
                    "variables": [
                      {
                        "name": "commits",
                        "current": [],
                        "type": "array",
                        "important": true
                      },
                      {
                        "name": "blobs",
                        "current": [],
                        "type": "array",
                        "important": true
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "name": "Create Blobs",
            "entryPoint": "Create content blobs for storage",
            "sections": [
              {
                "name": "Content Storage",
                "codeBlocks": [
                  {
                    "name": "Define Changes",
                    "code": [
                      "changes = [",
                      "  {'path': 'README.md', 'content': '# Project'},",
                      "  {'path': 'main.py', 'content': 'print(hello)'}",
                      "]"
                    ]
                  },
                  {
                    "name": "Blob Creation Loop",
                    "code": [
                      "for file in changes:",
                      "  content_hash = calculate_hash(file['content'])",
                      "  blob = { 'type': 'blob', 'content': file['content'], 'hash': content_hash }",
                      "  blobs.append(blob)",
                      "  repo['objects'][content_hash] = blob"
                    ],
                    "variables": [
                      {
                        "name": "content_hash",
                        "previous": null,
                        "current": "8c7e5a667f1b771847fe88c01c3de34413a1b08d",
                        "type": "string",
                        "important": true
                      },
                      {
                        "name": "blob",
                        "previous": null,
                        "current": { "type": "blob", "content": "file content" },
                        "type": "dictionary",
                        "important": true
                      }
                    ],
                    "conceptDetails": {
                      "title": "Blob Creation Process",
                      "points": [
                        "Content addressing using SHA-1",
                        "Immutable storage",
                        "Content deduplication"
                      ],
                      "focus": "How Git identifies unique content"
                    }
                  }
                ]
              }
            ]
          },
          {
            "name": "Build Tree",
            "entryPoint": "Organize blobs into a directory tree",
            "sections": [
              {
                "name": "Directory Structure",
                "codeBlocks": [
                  {
                    "name": "Tree Creation",
                    "code": [
                      "tree = {",
                      "  'type': 'tree',",
                      "  'entries': [],",
                      "  'hash': None",
                      "}"
                    ],
                    "variables": [
                      {
                        "name": "tree",
                        "previous": null,
                        "current": { "type": "tree", "entries": [] },
                        "type": "dictionary",
                        "important": true
                      }
                    ],
                    "conceptDetails": {
                      "title": "Tree Structure",
                      "points": [
                        "Represents directory state",
                        "Links to blobs (files)",
                        "Modes indicate file permissions"
                      ],
                      "focus": "Organizing content in a hierarchical structure"
                    }
                  }
                ]
              }
            ]
          },
          {
            "name": "Create Commit",
            "entryPoint": "Record the current state of the repository",
            "sections": [
              {
                "name": "Commit Creation",
                "codeBlocks": [
                  {
                    "name": "Initialize Commit",
                    "code": [
                      "commit = {",
                      "  'type': 'commit',",
                      "  'tree': tree['hash'],",
                      "  'parent': repo['latest_commit'],",
                      "  'author': 'Dev <dev@example.com>',",
                      "  'message': 'Initial commit',",
                      "  'hash': None",
                      "}"
                    ],
                    "variables": [
                      {
                        "name": "commit",
                        "previous": null,
                        "current": { "type": "commit", "tree": "7de3fa...", "parent": null },
                        "type": "dictionary",
                        "important": true
                      }
                    ],
                    "conceptDetails": {
                      "title": "Commit Structure",
                      "points": [
                        "Points to tree (content state)",
                        "Links to parent (history)",
                        "Contains metadata"
                      ],
                      "focus": "Recording the history of changes"
                    }
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "name": "Git Merge Process",
        "description": "How Git merges changes between branches",
        "tag": "AdvancedScenario",
        "steps": [
          {
            "name": "Load Branch States",
            "entryPoint": "Load branch states for current and target branches",
            "sections": [
              {
                "name": "Branch State Loading",
                "codeBlocks": [
                  {
                    "name": "Current Branch State",
                    "code": [
                      "current_branch = {",
                      "  'name': 'main',",
                      "  'head': 'abc123',",
                      "  'commit': repo['objects']['abc123']",
                      "}"
                    ]
                  }
                ]
              }
            ]
          },
          {
            "name": "Find Common Ancestor",
            "entryPoint": "Identify merge base by finding common commit",
            "sections": [
              {
                "name": "Ancestor Analysis",
                "codeBlocks": [
                  {
                    "name": "Initialize Search",
                    "code": [
                      "commit_queue = [current_branch['commit'], target_branch['commit']]",
                      "visited = set()"
                    ]
                  }
                ]
              }
            ]
          }
        ]
      }
    ]
  }
}
